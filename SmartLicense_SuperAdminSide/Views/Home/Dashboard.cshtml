@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model List<SmartLicense_SuperAdminSide.Models.Admin>

<h2>Dashboard</h2>
<div style="margin-bottom: 20px;">
    <input type="text" id="searchInput" placeholder="Search by CNIC" style="padding: 8px; width: 200px; border-radius: 5px; border: 1px solid #ccc;" />
</div>

<style>
    table {
        width: 100%;
        border-collapse: collapse;
    }
    th, td {
        text-align: left;
        padding: 8px;
    }
    th {
        background-color: #f2f2f2;
    }
    .action-button {
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
    .disable-button {
        background-color: #ff4d4d;
        color: white;
    }
    .enable-button {
        background-color: #4CAF50;
        color: white;
    }
    .disabled-row {
        background-color: #ffcccc;
    }
    .enabled-row {
        background-color: #ccffcc;
    }
    .pagination {
        margin-top: 20px;
        text-align: center;
    }
    .pagination a {
        padding: 8px 16px;
        text-decoration: none;
        color: #007BFF;
        cursor: pointer;
    }
    .pagination a.active {
        background-color: #007BFF;
        color: white;
        border-radius: 5px;
    }
    .pagination a:hover:not(.active) {
        background-color: #ddd;
        border-radius: 5px;
    }
    .hidden {
        display: none;
    }
</style>

<table id="adminTable">
    <thead>
        <tr>
            <th>CNIC</th>
            <th>Name</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="adminTableBody">
        @foreach (var admin in Model)
        {
            <tr class="@(admin.IsEnabled ? "enabled-row" : "disabled-row")" data-cnic="@admin.CNIC">
                <td>@admin.CNIC</td>
                <td>@admin.FirstName @admin.LastName</td>
                <td>@(admin.IsEnabled ? "Enabled" : "Disabled")</td>
                <td>
                    @if (admin.IsEnabled)
                    {
                        <form asp-action="DisableAdmin" asp-route-id="@admin.Id" method="post">
                            <button type="submit" class="action-button disable-button">Disable</button>
                        </form>
                    }
                    else
                    {
                        <form asp-action="EnableAdmin" asp-route-id="@admin.Id" method="post">
                            <button type="submit" class="action-button enable-button">Enable</button>
                        </form>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="pagination" id="pagination">
    <!-- Pagination will be generated by JavaScript -->
</div>

<script>
    const adminsPerPage = 10;
    let currentPage = 1;
    const allRows = Array.from(document.querySelectorAll('#adminTableBody tr')); // Store original rows

    // Initial setup
    document.addEventListener('DOMContentLoaded', () => {
        console.log('Page loaded, total rows:', allRows.length);
        setupPagination();
        filterAdmins(); // Show initial page
    });

    // Real-time search filtering
    document.getElementById('searchInput').addEventListener('input', () => {
        console.log('Search input changed:', document.getElementById('searchInput').value);
        currentPage = 1; // Reset to first page on search
        filterAdmins();
        setupPagination();
    });

    function filterAdmins() {
        const searchValue = document.getElementById('searchInput').value.toLowerCase().trim();
        console.log('Filtering with value:', searchValue);

        // Filter rows based on CNIC
        allRows.forEach(row => {
            const cnic = row.getAttribute('data-cnic').toLowerCase();
            const matches = cnic.includes(searchValue);
            console.log(`Checking CNIC: ${cnic}, Matches: ${matches}`);
            row.classList.toggle('hidden', !matches);
        });

        // Update pagination based on visible rows
        const visibleRows = allRows.filter(row => !row.classList.contains('hidden'));
        console.log('Visible rows after filter:', visibleRows.length);
        updateTable(visibleRows);
    }

    function updateTable(visibleRows) {
        const start = (currentPage - 1) * adminsPerPage;
        const end = start + adminsPerPage;

        visibleRows.forEach((row, index) => {
            row.classList.toggle('hidden', index < start || index >= end);
        });
    }

    function setupPagination() {
        const visibleRows = allRows.filter(row => !row.classList.contains('hidden'));
        const totalPages = Math.ceil(visibleRows.length / adminsPerPage);
        const paginationDiv = document.getElementById('pagination');
        paginationDiv.innerHTML = '';

        console.log('Setting up pagination, total pages:', totalPages);

        // Previous arrow
        const prevLink = document.createElement('a');
        prevLink.innerHTML = '<';
        prevLink.onclick = () => {
            if (currentPage > 1) {
                currentPage--;
                updateTable(visibleRows);
                updateActivePage();
            }
        };
        paginationDiv.appendChild(prevLink);

        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            const pageLink = document.createElement('a');
            pageLink.innerText = i;
            pageLink.className = i === currentPage ? 'active' : '';
            pageLink.onclick = () => {
                currentPage = i;
                updateTable(visibleRows);
                updateActivePage();
            };
            paginationDiv.appendChild(pageLink);
        }

        // Next arrow
        const nextLink = document.createElement('a');
        nextLink.innerHTML = '>';
        nextLink.onclick = () => {
            if (currentPage < totalPages) {
                currentPage++;
                updateTable(visibleRows);
                updateActivePage();
            }
        };
        paginationDiv.appendChild(nextLink);
    }

    function updateActivePage() {
        const links = document.querySelectorAll('.pagination a');
        links.forEach(link => {
            const pageNum = parseInt(link.innerText);
            if (!isNaN(pageNum)) {
                link.classList.toggle('active', pageNum === currentPage);
            }
        });
    }
</script>